# FastAPI-Based Blog Management System

A RESTful blog management API built with FastAPI, SQLAlchemy, Alembic, and PostgreSQL. It supports user authentication, post creation, voting, and more.

## Features

- **User Registration & Authentication:** Secure user signup and login using JWT tokens.
- **Post Management:** Create, read, update, and delete blog posts.
- **Voting System:** Users can upvote or remove their vote from posts.
- **Database Migrations:** Alembic is used for schema migrations.
- **Password Security:** Passwords are hashed using bcrypt via Passlib.
- **CORS Support:** Configurable origins for cross-origin requests.

## Tech Stack

- FastAPI
- SQLAlchemy
- Alembic
- PostgreSQL
- Passlib (bcrypt)
- Pydantic

## Currently the application is hosted on Render. URL= https://fastapi-based-blog-management-system.onrender.com
## Docs can be accessed at https://fastapi-based-blog-management-system.onrender.com/docs

## Steps to run the code locally

### 1. Clone the repository

```sh
git clone <repo-url>
cd Backend Project
```

### 2. Install dependencies

```sh
pip install -r requirements.txt
```

### 3. Configure environment variables

Edit the `.env` file with your database credentials and secret keys.

### 4. Run database migrations

```sh
alembic upgrade head
```

### 5. Start the server

```sh
uvicorn app.main:app --reload
```

### 6. API Documentation

Visit [http://localhost:8000/docs](http://localhost:8000/docs) for interactive API docs.

## Folder Structure

```
app/
  main.py
  models.py
  schemas.py
  database.py
  config.py
  utils.py
  auth2.py
  routers/
    posts.py
    users.py
    auth.py
    votes.py
alembic/
  versions/
.env
requirements.txt
README.md
```

## Endpoints Overview

- `POST /users/` - Register a new user
- `GET /users/{id}` - Get user by ID
- `POST /login` - Login and get JWT token
- `GET /posts/` - List posts (with votes)
- `POST /posts/` - Create a post
- `GET /posts/{id}` - Get a post by ID
- `PUT /posts/{id}` - Update a post
- `DELETE /posts/{id}` - Delete a post
- `POST /votes/` - Vote/unvote a post

## Example Usage

### Register a User

```json
POST /users/
{
  "email": "user@example.com",
  "password": "yourpassword"
}
```

### Login

```json
POST /login
{
  "username": "user@example.com",
  "password": "yourpassword"
}
```

### Create a Post

```json
POST /posts/
{
  "title": "My First Post",
  "caption": "Intro",
  "content": "Hello World!",
  "published": true
}
```